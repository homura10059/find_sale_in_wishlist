AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: kindle_sale api

Globals:
  Api:
    Cors: "'*'"
  Function:
    Runtime: python3.6
    Timeout: 300
    MemorySize: 256
    Environment:
      Variables:
        TABLE_USER: !Ref Users
        QUEUE_MONITORS: !Ref QueueMonitors
        CACHE_TABLE: !Ref CacheItems
        QUEUE_ITEMS: !Ref QueueItems
    DeadLetterQueue:
      Type: SNS
      TargetArn: arn:aws:sns:ap-northeast-1:267428311438:failed-lambda

Resources:
  # Role
  LambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "find_sale_in_wish_list_for_lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: "cloudwatch:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "sns:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "dynamodb:*"
                Resource: "*"
              - Effect: "Allow"
                Action: "logs:*"
                Resource: "arn:aws:logs:*:*:*"
  # CloudWatch Events で定期実行
  ## Lambda
  DirectorOfSystem:
    Type: AWS::Serverless::Function
    Properties:
      Handler: director_of_system.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
      CodeUri: ../dist/packages/
      Environment:
        Variables:
          TABLE_USER: !Ref Users
          QUEUE_MONITORS: !Ref QueueMonitors
      Events:
        ScheduledEventForDirectorOfSystem:
          Type: Schedule
          Properties:
            Schedule: cron(0 11 * * ? *)
            Input: ""
  LogGroupDirectorOfSystem:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DirectorOfSystem}
      RetentionInDays: 14
  Notifier:
    Type: AWS::Serverless::Function
    Properties:
      Handler: notifier.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
      CodeUri: ../dist/packages/
      Environment:
        Variables:
          TABLE_USER: !Ref Users
          QUEUE_MONITORS: !Ref QueueMonitors
          CACHE_TABLE: !Ref CacheItems
      Events:
        DynamoStreamEventForNotifier:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt QueueMonitors.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
  LogGroupNotifier:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Notifier}
      RetentionInDays: 14
  WorkerOfMonitor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: worker_of_monitor.lambda_handler
      Role: !GetAtt LambdaIamRole.Arn
      CodeUri: ../dist/packages/
      Events:
        DynamoStreamEventForWorkerOfMonitor:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt QueueMonitors.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
  LogGroupWorkerOfMonitor:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WorkerOfMonitor}
      RetentionInDays: 14
  ## DynamoDB
  Users:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
  QueueMonitors:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: "wish_list_url"
          AttributeType: "S"
        - AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "wish_list_url"
          KeyType: "HASH"
        - AttributeName: "user_id"
          KeyType: "RANGE"
      TimeToLiveSpecification:
        AttributeName: "expired"
        Enabled: true
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
  QueueItems:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
      - AttributeName: "item_url"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "item_url"
        KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expired"
        Enabled: true
      StreamSpecification:
        StreamViewType: 'NEW_IMAGE'
  CacheItems:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
      - AttributeName: "url"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "url"
        KeyType: "HASH"
      TimeToLiveSpecification:
        AttributeName: "expired"
        Enabled: true
